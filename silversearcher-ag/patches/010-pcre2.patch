--- a/configure.ac
+++ b/configure.ac
@@ -16,8 +16,6 @@ m4_ifdef(
     [AM_SILENT_RULES],
     [AM_SILENT_RULES([yes])])
 
-PKG_CHECK_MODULES([PCRE], [libpcre])
-
 m4_include([m4/ax_pthread.m4])
 AX_PTHREAD(
     [AC_CHECK_HEADERS([pthread.h])],
@@ -29,7 +27,7 @@ if ! echo "$CFLAGS" | "$GREP" '\(^\|[[[:
     CFLAGS="$CFLAGS -O2"
 fi
 
-CFLAGS="$CFLAGS $PTHREAD_CFLAGS $PCRE_CFLAGS -Wall -Wextra -Wformat=2 -Wno-format-nonliteral -Wshadow"
+CFLAGS="$CFLAGS $PTHREAD_CFLAGS -Wall -Wextra -Wformat=2 -Wno-format-nonliteral -Wshadow"
 CFLAGS="$CFLAGS -Wpointer-arith -Wcast-qual -Wmissing-prototypes -Wno-missing-braces -std=gnu89 -D_GNU_SOURCE"
 LDFLAGS="$LDFLAGS"
 
@@ -40,6 +38,26 @@ esac
 
 LIBS="$PTHREAD_LIBS $LIBS"
 
+AC_ARG_WITH([pcre2],
+    [AS_HELP_STRING([--with-pcre2], [Enable experimental support for libpcre2])])
+
+AS_IF([test "x$with_pcre2" = "xyes"], [
+      PKG_CHECK_MODULES([PCRE2], [libpcre2-8], [
+                        AC_DEFINE([HAVE_PCRE2], [], [Use libpcre2])
+                        AC_DEFINE([PCRE2_CODE_UNIT_WIDTH], [8], [8-byte characters for libpcre2])
+                        AC_DEFINE([USE_PCRE_JIT], [], [Use PCRE JIT])
+                        CFLAGS="$CFLAGS $PCRE2_CFLAGS"
+                        ])
+      ], [
+      PKG_CHECK_MODULES([PCRE], [libpcre], [
+                        AC_DEFINE([HAVE_PCRE], [], [Use libpcre])
+                        CFLAGS="$CFLAGS $PCRE_CFLAGS"
+                        AC_CHECK_DECL([PCRE_CONFIG_JIT], [AC_DEFINE([USE_PCRE_JIT], [], [Use PCRE JIT])],
+                                      [], [#include <pcre.h>])
+                        ])
+])
+AM_CONDITIONAL([HAVE_PCRE2], [test "x$with_pcre2" = "xyes"])
+
 AC_ARG_ENABLE([zlib],
     AS_HELP_STRING([--disable-zlib], [Disable zlib compressed search support]))
 
@@ -56,8 +74,6 @@ AS_IF([test "x$enable_lzma" != "xno"], [
     PKG_CHECK_MODULES([LZMA], [liblzma])
 ])
 
-AC_CHECK_DECL([PCRE_CONFIG_JIT], [AC_DEFINE([USE_PCRE_JIT], [], [Use PCRE JIT])], [], [#include <pcre.h>])
-
 AC_CHECK_DECL([CPU_ZERO, CPU_SET], [AC_DEFINE([USE_CPU_SET], [], [Use CPU_SET macros])] , [], [#include <sched.h>])
 AC_CHECK_HEADERS([sys/cpuset.h err.h])
 
--- /dev/null
+++ b/contrib/collect_defines.py
@@ -0,0 +1,29 @@
+#!/usr/bin/env python3
+
+import re
+
+def get_defines(ver=''):
+    regexes = [r'#define PCRE%s_(\w+)\s*0x'%ver,
+               r'#define PCRE%s_(INFO_\w+)\s*\d'%ver,
+               r'#define PCRE%s_(CONFIG_\w+)\s*\d'%ver]
+    defines = dict()
+    for i in range(len(regexes)):
+        defines[i] = set()
+
+    with open('/usr/include/pcre%s.h'%ver,'r') as fp:
+        for line in fp:
+            for (i, regex) in enumerate(regexes):
+                m = re.match(regex, line)
+                if m:
+                    break
+            if m:
+                defines[i].add(m.group(1))
+    return defines
+
+
+pcre_defines = get_defines()
+pcre2_defines = get_defines('2')
+
+for i in range(len(pcre_defines)):
+    for define in sorted(pcre_defines[i] & pcre2_defines[i]):
+        print('#define AG_PCRE_%-20s AG_PCRE_PREFIX(%s)'%(define, define))
--- a/Makefile.am
+++ b/Makefile.am
@@ -1,7 +1,7 @@
 ACLOCAL_AMFLAGS = ${ACLOCAL_FLAGS}
 
 bin_PROGRAMS = ag
-ag_SOURCES = src/ignore.c src/ignore.h src/log.c src/log.h src/options.c src/options.h src/print.c src/print_w32.c src/print.h src/scandir.c src/scandir.h src/search.c src/search.h src/lang.c src/lang.h src/util.c src/util.h src/decompress.c src/decompress.h src/uthash.h src/main.c src/zfile.c
+ag_SOURCES = src/ignore.c src/ignore.h src/log.c src/log.h src/options.c src/options.h src/print.c src/print_w32.c src/print.h src/scandir.c src/scandir.h src/search.c src/search.h src/lang.c src/lang.h src/util.c src/util.h src/decompress.c src/decompress.h src/uthash.h src/pcre_api.c src/pcre_api.h src/main.c src/zfile.c
 ag_LDADD = ${PCRE_LIBS} ${LZMA_LIBS} ${ZLIB_LIBS} $(PTHREAD_LIBS)
 
 dist_man_MANS = doc/ag.1
--- a/src/ignore.c
+++ b/src/ignore.c
@@ -9,6 +9,7 @@
 #include "ignore.h"
 #include "log.h"
 #include "options.h"
+#include "pcre_api.h"
 #include "scandir.h"
 #include "util.h"
 
@@ -200,7 +201,7 @@ static int ackmate_dir_match(const char
         return 0;
     }
     /* we just care about the match, not where the matches are */
-    return pcre_exec(opts.ackmate_dir_filter, NULL, dir_name, strlen(dir_name), 0, 0, NULL, 0);
+    return ag_pcre_match(opts.ackmate_dir_filter, NULL, dir_name, strlen(dir_name), 0, 0, NULL, 0);
 }
 
 /* This is the hottest code in Ag. 10-15% of all execution time is spent here */
--- a/src/main.c
+++ b/src/main.c
@@ -1,5 +1,4 @@
 #include <ctype.h>
-#include <pcre.h>
 #include <stdarg.h>
 #include <stdio.h>
 #include <string.h>
@@ -10,6 +9,7 @@
 #endif
 
 #include "config.h"
+#include "pcre_api.h"
 
 #ifdef HAVE_SYS_CPUSET_H
 #include <sys/cpuset.h>
@@ -37,8 +37,8 @@ int main(int argc, char **argv) {
     char **base_paths = NULL;
     char **paths = NULL;
     int i;
-    int pcre_opts = PCRE_MULTILINE;
-    int study_opts = 0;
+    int pcre_opts = AG_PCRE_MULTILINE;
+    int use_jit = 0;
     worker_t *workers = NULL;
     int workers_len;
     int num_cores;
@@ -57,17 +57,15 @@ int main(int argc, char **argv) {
     out_fd = stdout;
 
     parse_options(argc, argv, &base_paths, &paths);
-    log_debug("PCRE Version: %s", pcre_version());
+    log_debug("PCRE Version: %s", ag_pcre_version());
     if (opts.stats) {
         memset(&stats, 0, sizeof(stats));
         gettimeofday(&(stats.time_start), NULL);
     }
 
 #ifdef USE_PCRE_JIT
-    int has_jit = 0;
-    pcre_config(PCRE_CONFIG_JIT, &has_jit);
-    if (has_jit) {
-        study_opts |= PCRE_STUDY_JIT_COMPILE;
+    if (ag_pcre_config(AG_PCRE_CONFIG_JIT, &use_jit)) {
+        use_jit = TRUE;
     }
 #endif
 
@@ -131,7 +129,7 @@ int main(int argc, char **argv) {
         }
     } else {
         if (opts.casing == CASE_INSENSITIVE) {
-            pcre_opts |= PCRE_CASELESS;
+            pcre_opts |= AG_PCRE_CASELESS;
         }
         if (opts.word_regexp) {
             char *word_regexp_query;
@@ -140,7 +138,7 @@ int main(int argc, char **argv) {
             opts.query = word_regexp_query;
             opts.query_len = strlen(opts.query);
         }
-        compile_study(&opts.re, &opts.re_extra, opts.query, pcre_opts, study_opts);
+        ag_pcre_compile(&opts.re, &opts.re_extra, opts.query, pcre_opts, use_jit);
     }
 
     if (opts.search_stream) {
--- a/src/options.c
+++ b/src/options.c
@@ -13,6 +13,7 @@
 #include "lang.h"
 #include "log.h"
 #include "options.h"
+#include "pcre_api.h"
 #include "print.h"
 #include "util.h"
 
@@ -124,12 +125,16 @@ can be found at http://geoff.greer.fm/ag
 
 void print_version(void) {
     char jit = '-';
+    char pcre2 = '-';
     char lzma = '-';
     char zlib = '-';
 
 #ifdef USE_PCRE_JIT
     jit = '+';
 #endif
+#ifdef HAVE_PCRE2
+    pcre2 = '+';
+#endif
 #ifdef HAVE_LZMA_H
     lzma = '+';
 #endif
@@ -137,9 +142,10 @@ void print_version(void) {
     zlib = '+';
 #endif
 
-    printf("ag version %s\n\n", PACKAGE_VERSION);
+    printf("ag version %s\n", PACKAGE_VERSION);
+    printf("pcre version %s\n", ag_pcre_version());
     printf("Features:\n");
-    printf("  %cjit %clzma %czlib\n", jit, lzma, zlib);
+    printf("  %cjit %cpcre2 %clzma %czlib\n", jit, pcre2, lzma, zlib);
 }
 
 void init_options(void) {
@@ -178,25 +184,13 @@ void cleanup_options(void) {
         free(opts.query);
     }
 
-    pcre_free(opts.re);
-    if (opts.re_extra) {
-        /* Using pcre_free_study on pcre_extra* can segfault on some versions of PCRE */
-        pcre_free(opts.re_extra);
-    }
-
-    if (opts.ackmate_dir_filter) {
-        pcre_free(opts.ackmate_dir_filter);
-    }
-    if (opts.ackmate_dir_filter_extra) {
-        pcre_free(opts.ackmate_dir_filter_extra);
-    }
-
-    if (opts.file_search_regex) {
-        pcre_free(opts.file_search_regex);
-    }
-    if (opts.file_search_regex_extra) {
-        pcre_free(opts.file_search_regex_extra);
-    }
+    // Note, ag_pcre_free_* will do NULL checks and set the pointer to NULL after freeing
+    ag_pcre_free_re(&opts.re);
+    ag_pcre_free_extra(&opts.re_extra);
+    ag_pcre_free_re(&opts.ackmate_dir_filter);
+    ag_pcre_free_extra(&opts.ackmate_dir_filter_extra);
+    ag_pcre_free_re(&opts.file_search_regex);
+    ag_pcre_free_extra(&opts.file_search_regex_extra);
 }
 
 void parse_options(int argc, char **argv, char **base_paths[], char **paths[]) {
@@ -516,7 +510,7 @@ void parse_options(int argc, char **argv
                 break;
             case 0: /* Long option */
                 if (strcmp(longopts[opt_index].name, "ackmate-dir-filter") == 0) {
-                    compile_study(&opts.ackmate_dir_filter, &opts.ackmate_dir_filter_extra, optarg, 0, 0);
+                    ag_pcre_compile(&opts.ackmate_dir_filter, &opts.ackmate_dir_filter_extra, optarg, 0, 0);
                     break;
                 } else if (strcmp(longopts[opt_index].name, "depth") == 0) {
                     opts.max_search_depth = atoi(optarg);
@@ -603,21 +597,21 @@ void parse_options(int argc, char **argv
     if (file_search_regex) {
         int pcre_opts = 0;
         if (opts.casing == CASE_INSENSITIVE || (opts.casing == CASE_SMART && is_lowercase(file_search_regex))) {
-            pcre_opts |= PCRE_CASELESS;
+            pcre_opts |= AG_PCRE_CASELESS;
         }
         if (opts.word_regexp) {
             char *old_file_search_regex = file_search_regex;
             ag_asprintf(&file_search_regex, "\\b%s\\b", file_search_regex);
             free(old_file_search_regex);
         }
-        compile_study(&opts.file_search_regex, &opts.file_search_regex_extra, file_search_regex, pcre_opts, 0);
+        ag_pcre_compile(&opts.file_search_regex, &opts.file_search_regex_extra, file_search_regex, pcre_opts, 0);
         free(file_search_regex);
     }
 
     if (has_filetype) {
         num_exts = combine_file_extensions(ext_index, lang_num, &extensions);
         lang_regex = make_lang_regex(extensions, num_exts);
-        compile_study(&opts.file_search_regex, &opts.file_search_regex_extra, lang_regex, 0, 0);
+        ag_pcre_compile(&opts.file_search_regex, &opts.file_search_regex_extra, lang_regex, 0, 0);
     }
 
     if (extensions) {
--- a/src/options.h
+++ b/src/options.h
@@ -4,7 +4,7 @@
 #include <getopt.h>
 #include <sys/stat.h>
 
-#include <pcre.h>
+#include "pcre_api.h"
 
 #define DEFAULT_AFTER_LEN 2
 #define DEFAULT_BEFORE_LEN 2
@@ -28,15 +28,15 @@ enum path_print_behavior {
 
 typedef struct {
     int ackmate;
-    pcre *ackmate_dir_filter;
-    pcre_extra *ackmate_dir_filter_extra;
+    ag_pcre_re_t *ackmate_dir_filter;
+    ag_pcre_extra_t *ackmate_dir_filter_extra;
     size_t after;
     size_t before;
     enum case_behavior casing;
     const char *file_search_string;
     int match_files;
-    pcre *file_search_regex;
-    pcre_extra *file_search_regex_extra;
+    ag_pcre_re_t *file_search_regex;
+    ag_pcre_extra_t *file_search_regex_extra;
     int color;
     char *color_line_number;
     char *color_match;
@@ -65,8 +65,8 @@ typedef struct {
     int print_line_numbers;
     int print_long_lines; /* TODO: support this in print.c */
     int passthrough;
-    pcre *re;
-    pcre_extra *re_extra;
+    ag_pcre_re_t *re;
+    ag_pcre_extra_t *re_extra;
     int recurse_dirs;
     int search_all_files;
     int skip_vcs_ignores;
--- /dev/null
+++ b/src/pcre_api.c
@@ -0,0 +1,126 @@
+/******************************************************************************
+ * Copyright (c) 2016 Allen Wild <allenwild93@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+#include "pcre_api.h"
+#include "util.h"
+
+/*
+ * Return the pcre version string
+ */
+const char *ag_pcre_version(void) {
+#ifndef HAVE_PCRE2
+    return pcre_version();
+#else
+    return AG_STRINGIFY(PCRE2_MAJOR) "." AG_STRINGIFY(PCRE2_MINOR) " " AG_STRINGIFY(PCRE2_DATE);
+#endif
+}
+
+/*
+ * Free the regex pointed to by re and set the pointer to NULL
+ */
+void ag_pcre_free_re(ag_pcre_re_t **re) {
+    if (re && *re) {
+#ifndef HAVE_PCRE2
+        pcre_free(*re);
+#else
+        pcre2_code_free(*re);
+#endif
+        *re = NULL;
+    }
+}
+
+/*
+ * Free the regex pointed to by re and set the pointer to NULL
+ */
+void ag_pcre_free_extra(ag_pcre_extra_t **extra) {
+    if (extra && *extra) {
+#ifndef HAVE_PCRE2
+        pcre_free(*extra);
+#else
+        pcre2_match_context_free(*extra);
+#endif
+        *extra = NULL;
+    }
+}
+
+/*
+ * This function used to be compile_study
+ */
+void ag_pcre_compile(ag_pcre_re_t **re, ag_pcre_extra_t **re_extra, char *q, const int pcre_opts, int use_jit) {
+    const char *pcre_err = NULL;
+    int pcre_err_offset = 0;
+
+#ifdef HAVE_PCRE2
+    int pcre2_err = 0;
+    char pcre2_err_buf[120] = { 0 };
+    *re = pcre2_compile((PCRE2_UCHAR8 *)q, PCRE2_ZERO_TERMINATED, pcre_opts,
+                        &pcre2_err, (PCRE2_SIZE *)&pcre_err_offset, NULL);
+    if (*re == NULL) {
+        pcre2_get_error_message(pcre2_err, (PCRE2_UCHAR8 *)pcre2_err_buf, sizeof(pcre2_err_buf));
+        pcre_err = pcre2_err_buf;
+    }
+#else
+    *re = pcre_compile(q, pcre_opts, &pcre_err, &pcre_err_offset, NULL);
+#endif
+
+    if (*re == NULL) {
+        die("Bad regex! pcre_compile() failed at position %i: %s\nIf you meant to search for a literal string, run ag with -Q",
+            pcre_err_offset,
+            pcre_err);
+    }
+
+#ifdef HAVE_PCRE2
+    if (use_jit) {
+        if (pcre2_jit_compile(*re, PCRE2_JIT_COMPLETE)) {
+            log_warn("PCRE2 JIT compilation failed!");
+        }
+    }
+    *re_extra = NULL;
+#else
+    if (use_jit) {
+        use_jit = PCRE_STUDY_JIT_COMPILE;
+    }
+    *re_extra = pcre_study(*re, use_jit, &pcre_err);
+    if (*re_extra == NULL) {
+        log_debug("pcre_study returned nothing useful. Error: %s", pcre_err);
+    }
+#endif
+}
+
+/*
+ * Run either pcre_match or pcre_exec
+ */
+int ag_pcre_match(ag_pcre_re_t *re, ag_pcre_extra_t *extra, const char *buf, int length,
+                  int offset, int options, int *ovector, int ovecsize) {
+    int rc;
+#ifdef HAVE_PCRE2
+    pcre2_match_data *match_data = pcre2_match_data_create(ovecsize, NULL);
+    uint32_t ovec_count;
+    PCRE2_SIZE *ovec_pointer;
+    int i;
+
+    rc = pcre2_match(re, (const PCRE2_UCHAR8 *)buf, (PCRE2_SIZE)length, offset, options, match_data, extra);
+    ovec_count = pcre2_get_ovector_count(match_data);
+    ovec_pointer = pcre2_get_ovector_pointer(match_data);
+    for (i = 0; i < ovecsize && (uint32_t)i < ovec_count; i++) {
+        ovector[i] = ovec_pointer[i];
+    }
+    pcre2_match_data_free(match_data);
+#else
+    rc = pcre_exec(re, extra, buf, length, offset, options, ovector, ovecsize);
+#endif
+    return rc;
+}
--- /dev/null
+++ b/src/pcre_api.h
@@ -0,0 +1,121 @@
+/******************************************************************************
+ * Copyright (c) 2016 Allen Wild <allenwild93@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+#ifndef __PCRE_API_H__
+#define __PCRE_API_H__
+
+#include "config.h"
+
+#ifdef HAVE_PCRE2
+#include <pcre2.h>
+#define AG_PCRE_DEFINE_PREFIX PCRE2_
+#else
+#include <pcre.h>
+#define AG_PCRE_DEFINE_PREFIX PCRE_
+#endif // HAVE_PCRE2
+
+// Common macros so that AG_PCRE_* will automatically expand to either
+// PCRE_* or PCRE2_*
+// The macros below are taken from pcre2.h
+#define AG_PCRE_JOIN(a, b) a##b
+#define AG_PCRE_GLUE(a, b) AG_PCRE_JOIN(a, b)
+#define AG_PCRE_PREFIX(a) AG_PCRE_GLUE(AG_PCRE_DEFINE_PREFIX, a)
+
+// This list is auto-generated by contrib/collect_defines.py and consists of
+// "common" symbols between PCRE and PCRE2. These should expand to macros to
+// avoid issues with the underlying values being different
+#define AG_PCRE_ANCHORED AG_PCRE_PREFIX(ANCHORED)
+#define AG_PCRE_AUTO_CALLOUT AG_PCRE_PREFIX(AUTO_CALLOUT)
+#define AG_PCRE_CASELESS AG_PCRE_PREFIX(CASELESS)
+#define AG_PCRE_DFA_RESTART AG_PCRE_PREFIX(DFA_RESTART)
+#define AG_PCRE_DFA_SHORTEST AG_PCRE_PREFIX(DFA_SHORTEST)
+#define AG_PCRE_DOLLAR_ENDONLY AG_PCRE_PREFIX(DOLLAR_ENDONLY)
+#define AG_PCRE_DOTALL AG_PCRE_PREFIX(DOTALL)
+#define AG_PCRE_DUPNAMES AG_PCRE_PREFIX(DUPNAMES)
+#define AG_PCRE_EXTENDED AG_PCRE_PREFIX(EXTENDED)
+#define AG_PCRE_FIRSTLINE AG_PCRE_PREFIX(FIRSTLINE)
+#define AG_PCRE_MULTILINE AG_PCRE_PREFIX(MULTILINE)
+#define AG_PCRE_NEVER_UTF AG_PCRE_PREFIX(NEVER_UTF)
+#define AG_PCRE_NOTBOL AG_PCRE_PREFIX(NOTBOL)
+#define AG_PCRE_NOTEMPTY AG_PCRE_PREFIX(NOTEMPTY)
+#define AG_PCRE_NOTEMPTY_ATSTART AG_PCRE_PREFIX(NOTEMPTY_ATSTART)
+#define AG_PCRE_NOTEOL AG_PCRE_PREFIX(NOTEOL)
+#define AG_PCRE_NO_AUTO_CAPTURE AG_PCRE_PREFIX(NO_AUTO_CAPTURE)
+#define AG_PCRE_NO_AUTO_POSSESS AG_PCRE_PREFIX(NO_AUTO_POSSESS)
+#define AG_PCRE_NO_START_OPTIMIZE AG_PCRE_PREFIX(NO_START_OPTIMIZE)
+#define AG_PCRE_PARTIAL_HARD AG_PCRE_PREFIX(PARTIAL_HARD)
+#define AG_PCRE_PARTIAL_SOFT AG_PCRE_PREFIX(PARTIAL_SOFT)
+#define AG_PCRE_UCP AG_PCRE_PREFIX(UCP)
+#define AG_PCRE_UNGREEDY AG_PCRE_PREFIX(UNGREEDY)
+#define AG_PCRE_INFO_BACKREFMAX AG_PCRE_PREFIX(INFO_BACKREFMAX)
+#define AG_PCRE_INFO_CAPTURECOUNT AG_PCRE_PREFIX(INFO_CAPTURECOUNT)
+#define AG_PCRE_INFO_HASCRORLF AG_PCRE_PREFIX(INFO_HASCRORLF)
+#define AG_PCRE_INFO_JCHANGED AG_PCRE_PREFIX(INFO_JCHANGED)
+#define AG_PCRE_INFO_JITSIZE AG_PCRE_PREFIX(INFO_JITSIZE)
+#define AG_PCRE_INFO_MATCHLIMIT AG_PCRE_PREFIX(INFO_MATCHLIMIT)
+#define AG_PCRE_INFO_MAXLOOKBEHIND AG_PCRE_PREFIX(INFO_MAXLOOKBEHIND)
+#define AG_PCRE_INFO_MINLENGTH AG_PCRE_PREFIX(INFO_MINLENGTH)
+#define AG_PCRE_INFO_NAMECOUNT AG_PCRE_PREFIX(INFO_NAMECOUNT)
+#define AG_PCRE_INFO_NAMEENTRYSIZE AG_PCRE_PREFIX(INFO_NAMEENTRYSIZE)
+#define AG_PCRE_INFO_NAMETABLE AG_PCRE_PREFIX(INFO_NAMETABLE)
+#define AG_PCRE_INFO_RECURSIONLIMIT AG_PCRE_PREFIX(INFO_RECURSIONLIMIT)
+#define AG_PCRE_INFO_SIZE AG_PCRE_PREFIX(INFO_SIZE)
+#define AG_PCRE_CONFIG_BSR AG_PCRE_PREFIX(CONFIG_BSR)
+#define AG_PCRE_CONFIG_JIT AG_PCRE_PREFIX(CONFIG_JIT)
+#define AG_PCRE_CONFIG_JITTARGET AG_PCRE_PREFIX(CONFIG_JITTARGET)
+#define AG_PCRE_CONFIG_NEWLINE AG_PCRE_PREFIX(CONFIG_NEWLINE)
+#define AG_PCRE_CONFIG_STACKRECURSE AG_PCRE_PREFIX(CONFIG_STACKRECURSE)
+
+// Stringification Macros
+#define AG_STRINGIFY(s) AG_STRINGIFY_(s)
+#define AG_STRINGIFY_(s) #s
+
+/******************************************************************************
+ * TYPES
+ ******************************************************************************/
+#ifdef HAVE_PCRE2
+// For pcre2
+typedef pcre2_code ag_pcre_re_t;
+typedef pcre2_match_context ag_pcre_extra_t;
+#else
+// For leagacy pcre
+typedef pcre ag_pcre_re_t;
+typedef pcre_extra ag_pcre_extra_t;
+#endif
+
+/******************************************************************************
+ * FUNCTIONS
+ ******************************************************************************/
+// Function macros - for where the usage of pcre_*() and pcre2_*() are interchangeable
+// (perhaps with the help of other AG_PCRE defines
+#ifdef HAVE_PCRE2
+// For pcre2
+#define ag_pcre_config pcre2_config
+#else
+// For legacy pcre
+#define ag_pcre_config pcre_config
+#endif
+
+// Functions which need to be wrapped in more than name
+const char *ag_pcre_version(void);
+void ag_pcre_free_re(ag_pcre_re_t **re);
+void ag_pcre_free_extra(ag_pcre_extra_t **pextra);
+void ag_pcre_compile(ag_pcre_re_t **re, ag_pcre_extra_t **re_extra, char *q,
+                     const int pcre_opts, int use_jit);
+int ag_pcre_match(ag_pcre_re_t *re, ag_pcre_extra_t *extra, const char *buf, int length,
+                  int offset, int options, int *ovector, int ovecsize);
+
+#endif // __PCRE_API_H__
--- a/src/search.c
+++ b/src/search.c
@@ -101,7 +101,7 @@ void search_buf(const char *buf, const s
         int offset_vector[3];
         if (opts.multiline) {
             while (buf_offset < buf_len &&
-                   (pcre_exec(opts.re, opts.re_extra, buf, buf_len, buf_offset, 0, offset_vector, 3)) >= 0) {
+                   (ag_pcre_match(opts.re, opts.re_extra, buf, buf_len, buf_offset, 0, offset_vector, 3)) >= 0) {
                 log_debug("Regex match found. File %s, offset %i bytes.", dir_full_path, offset_vector[0]);
                 buf_offset = offset_vector[1];
                 if (offset_vector[0] == offset_vector[1]) {
@@ -129,7 +129,7 @@ void search_buf(const char *buf, const s
                 }
                 size_t line_offset = 0;
                 while (line_offset < line_len) {
-                    int rv = pcre_exec(opts.re, opts.re_extra, line, line_len, line_offset, 0, offset_vector, 3);
+                    int rv = ag_pcre_match(opts.re, opts.re_extra, line, line_len, line_offset, 0, offset_vector, 3);
                     if (rv < 0) {
                         break;
                     }
@@ -598,8 +598,8 @@ void search_dir(ignores *ig, const char
 
         if (!is_directory(path, dir)) {
             if (opts.file_search_regex) {
-                rc = pcre_exec(opts.file_search_regex, NULL, dir_full_path, strlen(dir_full_path),
-                               0, 0, offset_vector, 3);
+                rc = ag_pcre_match(opts.file_search_regex, NULL, dir_full_path, strlen(dir_full_path),
+                                   0, 0, offset_vector, 3);
                 if (rc < 0) { /* no match */
                     log_debug("Skipping %s due to file_search_regex.", dir_full_path);
                     goto cleanup;
--- a/src/search.h
+++ b/src/search.h
@@ -5,7 +5,6 @@
 #include <errno.h>
 #include <fcntl.h>
 #include <limits.h>
-#include <pcre.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
@@ -27,6 +26,7 @@
 #include "ignore.h"
 #include "log.h"
 #include "options.h"
+#include "pcre_api.h"
 #include "print.h"
 #include "uthash.h"
 #include "util.h"
--- a/src/util.c
+++ b/src/util.c
@@ -311,22 +311,6 @@ void realloc_matches(match_t **matches,
     *matches = ag_realloc(*matches, *matches_size * sizeof(match_t));
 }
 
-void compile_study(pcre **re, pcre_extra **re_extra, char *q, const int pcre_opts, const int study_opts) {
-    const char *pcre_err = NULL;
-    int pcre_err_offset = 0;
-
-    *re = pcre_compile(q, pcre_opts, &pcre_err, &pcre_err_offset, NULL);
-    if (*re == NULL) {
-        die("Bad regex! pcre_compile() failed at position %i: %s\nIf you meant to search for a literal string, run ag with -Q",
-            pcre_err_offset,
-            pcre_err);
-    }
-    *re_extra = pcre_study(*re, study_opts, &pcre_err);
-    if (*re_extra == NULL) {
-        log_debug("pcre_study returned nothing useful. Error: %s", pcre_err);
-    }
-}
-
 /* This function is very hot. It's called on every file. */
 int is_binary(const void *buf, const size_t buf_len) {
     size_t suspicious_bytes = 0;
--- a/src/util.h
+++ b/src/util.h
@@ -2,7 +2,6 @@
 #define UTIL_H
 
 #include <dirent.h>
-#include <pcre.h>
 #include <stdint.h>
 #include <stdio.h>
 #include <string.h>
@@ -77,7 +76,6 @@ const char *hash_strnstr(const char *s,
 
 size_t invert_matches(const char *buf, const size_t buf_len, match_t matches[], size_t matches_len);
 void realloc_matches(match_t **matches, size_t *matches_size, size_t matches_len);
-void compile_study(pcre **re, pcre_extra **re_extra, char *q, const int pcre_opts, const int study_opts);
 
 
 int is_binary(const void *buf, const size_t buf_len);
